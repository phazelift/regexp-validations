"use strict";var types=require("types.js"),RegExpValidations=function(t){this.setErrorHandler(t),this.validations={}};RegExpValidations.prototype.setErrorHandler=function(t){return this.errorHandler=types.forceFunction(t),this},RegExpValidations.prototype.hasKey=function(t){return this.validations.hasOwnProperty(t)},RegExpValidations.prototype.addOne=function(t,e){return types.notString(t)?(this.errorHandler("key: ",t,"is not of type string, cannot add validation!"),!1):this.hasKey(t)?(this.errorHandler("key: ",t,"already exists with regexp:",this.validations[t],"cannot add!"),!1):(this.validations[t]=types.forceRegExp(e),!0)},RegExpValidations.prototype.add=function(t,e){var r=!1;if(types.isObject(t)){for(var i in t)this.addOne(i,t[i])||(r=!0);return!r}return this.addOne(t,e)},RegExpValidations.prototype.validateOne=function(t,e){if(!this.hasKey(t))return this.errorHandler("cannot validate non-existing key:",t),null;if(types.notStringOrNumber(e))return this.errorHandler("invalid value, must be of type String or Number!"),null;var r=this.validations[t],i=types.isString(e)?'"'+e+'"':e;return r.test(e)?!0:(this.errorHandler("value: "+i+" did not pass "+t+"!",{key:t,value:e,regexp:this.validations[t]}),!1)},RegExpValidations.prototype.validate=function(t,e){if(types.notArray(t))return this.validateOne(t,e);var r=!0;for(var i in t){var n=t[i];if(types.notObject(n))return this.errorHandler("invalid or non-object type encountered in validations!"),null;var a=Object.keys(n)[0];if(!this.validateOne(a,n[a])&&(r=!1,!e))break}return r},module.exports=RegExpValidations;